// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/jwt/jwt.go
//
// Generated by this command:
//
//	mockgen -source=pkg/jwt/jwt.go -destination=test/usecase/jwt_mock_test.go -package=usecase_test
//

// Package usecase_test is a generated GoMock package.
package usecase_test

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockJWTItf is a mock of JWTItf interface.
type MockJWTItf struct {
	ctrl     *gomock.Controller
	recorder *MockJWTItfMockRecorder
	isgomock struct{}
}

// MockJWTItfMockRecorder is the mock recorder for MockJWTItf.
type MockJWTItfMockRecorder struct {
	mock *MockJWTItf
}

// NewMockJWTItf creates a new mock instance.
func NewMockJWTItf(ctrl *gomock.Controller) *MockJWTItf {
	mock := &MockJWTItf{ctrl: ctrl}
	mock.recorder = &MockJWTItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTItf) EXPECT() *MockJWTItfMockRecorder {
	return m.recorder
}

// CreateToken mocks base method.
func (m *MockJWTItf) CreateToken(userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockJWTItfMockRecorder) CreateToken(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockJWTItf)(nil).CreateToken), userID)
}

// VerifyToken mocks base method.
func (m *MockJWTItf) VerifyToken(tokenString string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", tokenString)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockJWTItfMockRecorder) VerifyToken(tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockJWTItf)(nil).VerifyToken), tokenString)
}
